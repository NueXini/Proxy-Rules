
name: NueXini

on:
  workflow_dispatch:
    inputs:
      source:
        description: 'Git Source'
        required: true
        default: '1'
      ifusepatch:
        description: 'Use Patch'
        required: true
        default: 'true'
        
jobs:
  Fconfig: 
    name: Generate Config
    runs-on: ubuntu-latest
    outputs:
      CFG_CONFIG: ${{ steps.findconfig.outputs.CFG_CONFIG }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Find Config
        id: findconfig
        run: |
          CFGS="$(cat $GITHUB_WORKSPACE/Z.Backup/config/cfg.list)"
          
          NUEXINI='['
          n=1
          
          for a in $CFGS; do
            [[ $n -ne 1 ]] && NUEXINI="$NUEXINI"','
            NUEXINI="$NUEXINI"'"'"${a}"'"'
            n=0
          done
          
          NUEXINI="$NUEXINI"']'
          
          echo $NUEXINI
          echo "::set-output name=CFG_CONFIG::$NUEXINI"
  
  build:
    name: ${{ matrix.config }}
    needs: [Fconfig]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
        config: ${{fromJson(needs.Fconfig.outputs.CFG_CONFIG)}}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y update 2>&1 >/dev/null
          sudo -E apt-get -y install $(cat ./.github/workflows/BuildEnviroment) 2>&1 >/dev/null
          sudo -E apt-get -y autoremove --purge 2>&1 >/dev/null
          sudo -E apt-get -y clean 2>&1 >/dev/null

      - name: Build
        run: |
          chmod +x $GITHUB_WORKSPACE/Z.Backup/sh/*.sh
          chmod +x $GITHUB_WORKSPACE/Z.Backup/scripts/*.sh
          
          releasetag=$(sed -n "${{ github.event.inputs.source }}p" $GITHUB_WORKSPACE/Z.Backup/config/releasetag.list)
          git clone $releasetag nuexini
          
          cd nuexini
          bash $GITHUB_WORKSPACE/Z.Backup/sh/Hello_NueXini.sh
          
          ./scripts/feeds update -a > /dev/null
          ./scripts/feeds install -a
         
          cp -f $GITHUB_WORKSPACE/Z.Backup/config/${{ matrix.config }} .config
          
          bash $GITHUB_WORKSPACE/Z.Backup/sh/Hi_NueXini.sh
          
          if [ ${{ github.event.inputs.ifusepatch }} == 'true' ]; then
              bash $GITHUB_WORKSPACE/Z.Backup/scripts/patch.sh
          fi
          
          make defconfig
          make download -j8
          rm -rf $(find ./dl/ -size -1024c)
          
          make -j8 || make -j1 V=sc > ./make-error.log 2>&1
          
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/IPK
          cp -rf $(find ./bin/ -type f -name "*.ipk") ./artifact/IPK/
          
          bash $GITHUB_WORKSPACE/Z.Backup/scripts/firmware.sh || /bin/bash $GITHUB_WORKSPACE/Z.Backup/scripts/firmware.sh all
    
      - name: Upload error log
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: ${{ matrix.config }}-build-failure-log
          path: nuexini/make-error.log
        
      - name: Upload Firmware
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.config }}-Firmware
          path: nuexini/artifact/firmware

      - name: Upload IPK
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.config }}-Packages
          path: nuexini/artifact/IPK
