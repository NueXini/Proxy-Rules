diff --git a/src/cache.c b/src/cache.c
index 8add610..1198c42 100644
--- a/src/cache.c
+++ b/src/cache.c
@@ -66,6 +66,7 @@ static const struct {
   { 52,  "TLSA" },
   { 53,  "SMIMEA" },
   { 55,  "HIP" },
+  { 65,  "HTTPS"},
   { 249, "TKEY" },
   { 250, "TSIG" },
   { 251, "IXFR" },
@@ -1804,6 +1805,19 @@ char *record_source(unsigned int index)
 
   return "<unknown>";
 }
+// patch: function returns integer 1 if query type is unknown.
+// known types are defined in cache.c:typestr:36.
+int is_query_type_unknown(unsigned short type)
+{
+  unsigned int i;
+  for (i = 0; i < (sizeof(typestr)/sizeof(typestr[0])); i++)
+    if (typestr[i].type == type) 
+      {
+	return 0;
+      }
+  return 1;
+}
+// end of patch 
 
 char *querystr(char *desc, unsigned short type)
 {
diff --git a/src/dns-protocol.h b/src/dns-protocol.h
index 496a4bb..ed0d64a 100644
--- a/src/dns-protocol.h
+++ b/src/dns-protocol.h
@@ -71,6 +71,7 @@
 #define T_NSEC          47
 #define T_DNSKEY        48
 #define T_NSEC3         50
+#define T_HTTPS         65
 #define	T_TKEY		249		
 #define	T_TSIG		250
 #define T_AXFR          252
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index 8674823..0cdb219 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -275,7 +275,10 @@ struct event_desc {
 #define OPT_UMBRELLA_DEVID 64
 #define OPT_CMARK_ALST_EN  65
 #define OPT_QUIET_TFTP     66
-#define OPT_LAST           67
+#define OPT_FILTER_AAAA    67
+#define OPT_FILTER_HTTPS   68
+#define OPT_FILTER_UNKNOWN 69
+#define OPT_LAST           70
 
 #define OPTION_BITS (sizeof(unsigned int)*8)
 #define OPTION_SIZE ( (OPT_LAST/OPTION_BITS)+((OPT_LAST%OPTION_BITS)!=0) )
@@ -1116,7 +1119,7 @@ extern struct daemon {
   int max_logs;  /* queue limit */
   int cachesize, ftabsize;
   int port, query_port, min_port, max_port;
-  unsigned long local_ttl, neg_ttl, max_ttl, min_cache_ttl, max_cache_ttl, auth_ttl, dhcp_ttl, use_dhcp_ttl;
+  unsigned long local_ttl, neg_ttl, min_ttl, max_ttl, min_cache_ttl, max_cache_ttl, auth_ttl, dhcp_ttl, use_dhcp_ttl;
   char *dns_client_id;
   u32 umbrella_org;
   u32 umbrella_asset;
@@ -1247,6 +1250,10 @@ void cache_init(void);
 void next_uid(struct crec *crecp);
 void log_query(unsigned int flags, char *name, union all_addr *addr, char *arg); 
 char *record_source(unsigned int index);
+// patch: function returns integer 1 if query type is unknown
+// known types are defined in cache.c:typestr:36.
+int is_query_type_unknown(unsigned short type);
+// end of patch
 char *querystr(char *desc, unsigned short type);
 int cache_find_non_terminal(char *name, time_t now);
 struct crec *cache_find_by_addr(struct crec *crecp,
diff --git a/src/option.c b/src/option.c
index ffce9fc..6435c88 100644
--- a/src/option.c
+++ b/src/option.c
@@ -174,6 +174,10 @@ struct myoption {
 #define LOPT_CMARK_ALST_EN 365
 #define LOPT_CMARK_ALST    366
 #define LOPT_QUIET_TFTP    367
+#define LOPT_MINTTL        368
+#define LOPT_FILTER_AAAA   369
+#define LOPT_FILTER_HTTPS  370
+#define LOPT_FILTER_UNKNOWN 371
  
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -292,6 +296,7 @@ static const struct myoption opts[] =
     { "dhcp-name-match", 1, 0, LOPT_NAME_MATCH },
     { "dhcp-broadcast", 2, 0, LOPT_BROADCAST },
     { "neg-ttl", 1, 0, LOPT_NEGTTL },
+	{ "min-ttl", 1, 0, LOPT_MINTTL },
     { "max-ttl", 1, 0, LOPT_MAXTTL },
     { "min-cache-ttl", 1, 0, LOPT_MINCTTL },
     { "max-cache-ttl", 1, 0, LOPT_MAXCTTL },
@@ -353,6 +358,9 @@ static const struct myoption opts[] =
     { "log-debug", 0, 0, LOPT_LOG_DEBUG },
 	{ "umbrella", 2, 0, LOPT_UMBRELLA },
     { "quiet-tftp", 0, 0, LOPT_QUIET_TFTP },
+	{ "filter-aaaa", 0, 0, LOPT_FILTER_AAAA },
+	{ "filter-https", 0, 0, LOPT_FILTER_HTTPS },
+	{ "filter-unknown", 0, 0, LOPT_FILTER_UNKNOWN },
     { NULL, 0, 0, 0 }
   };
 
@@ -425,6 +433,7 @@ static struct {
   { 't', ARG_ONE, "<host_name>", gettext_noop("Specify default target in an MX record."), NULL },
   { 'T', ARG_ONE, "<integer>", gettext_noop("Specify time-to-live in seconds for replies from /etc/hosts."), NULL },
   { LOPT_NEGTTL, ARG_ONE, "<integer>", gettext_noop("Specify time-to-live in seconds for negative caching."), NULL },
+  { LOPT_MINTTL, ARG_ONE, "<integer>", gettext_noop("Specify time-to-live in seconds for minimum TTL to send to clients."), NULL },
   { LOPT_MAXTTL, ARG_ONE, "<integer>", gettext_noop("Specify time-to-live in seconds for maximum TTL to send to clients."), NULL },
   { LOPT_MAXCTTL, ARG_ONE, "<integer>", gettext_noop("Specify time-to-live ceiling for cache."), NULL },
   { LOPT_MINCTTL, ARG_ONE, "<integer>", gettext_noop("Specify time-to-live floor for cache."), NULL },
@@ -539,6 +548,9 @@ static struct {
   { LOPT_SCRIPT_TIME, OPT_LEASE_RENEW, NULL, gettext_noop("Call dhcp-script when lease expiry changes."), NULL },
   { LOPT_UMBRELLA, ARG_ONE, "[=<optspec>]", gettext_noop("Send Cisco Umbrella identifiers including remote IP."), NULL },
   { LOPT_QUIET_TFTP, OPT_QUIET_TFTP, NULL, gettext_noop("Do not log routine TFTP."), NULL },
+  { LOPT_FILTER_AAAA, OPT_FILTER_AAAA, NULL, gettext_noop("Filter all AAAA requests."), NULL },
+  { LOPT_FILTER_HTTPS, OPT_FILTER_HTTPS, NULL, gettext_noop("Filter all HTTPS/query type 65 requests."), NULL },
+  { LOPT_FILTER_UNKNOWN, OPT_FILTER_UNKNOWN, NULL, gettext_noop("Filter all unknown query types (known are defined in cache.c)."), NULL },
   { 0, 0, NULL, NULL, NULL }
 }; 
 
@@ -3047,6 +3059,7 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
       
     case 'T':         /* --local-ttl */
     case LOPT_NEGTTL: /* --neg-ttl */
+	case LOPT_MINTTL: /* --min-ttl */
     case LOPT_MAXTTL: /* --max-ttl */
     case LOPT_MINCTTL: /* --min-cache-ttl */
     case LOPT_MAXCTTL: /* --max-cache-ttl */
@@ -3058,6 +3071,8 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	  ret_err(gen_err);
 	else if (option == LOPT_NEGTTL)
 	  daemon->neg_ttl = (unsigned long)ttl;
+	else if (option == LOPT_MINTTL)
+	  daemon->min_ttl = (unsigned long)ttl;
 	else if (option == LOPT_MAXTTL)
 	  daemon->max_ttl = (unsigned long)ttl;
 	else if (option == LOPT_MINCTTL)
diff --git a/src/rfc1035.c b/src/rfc1035.c
index 6fc4f26..50e07a4 100644
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -607,6 +607,7 @@ int extract_addresses(struct dns_header *header, size_t qlen, char *name, time_t
 	  for (j = 0; j < ntohs(header->ancount); j++) 
 	    {
 	      int secflag = 0;
+		  unsigned long mttl = 0;
 	      if (!(res = extract_name(header, qlen, &p1, name, 0, 10)))
 		return 0; /* bad packet */
 	      
@@ -615,6 +616,14 @@ int extract_addresses(struct dns_header *header, size_t qlen, char *name, time_t
 	      GETLONG(attl, p1);
 	      
 	      if ((daemon->max_ttl != 0) && (attl > daemon->max_ttl) && !is_sign)
+			{
+ 	          mttl = daemon->max_ttl;
+ 	        }
+ 	      if ((daemon->min_ttl != 0) && (attl < daemon->min_ttl) && !is_sign)
+ 	        {
+ 	           mttl = daemon->min_ttl;
+ 	        }
+ 	      if (mttl != 0)
 		{
 		  (p1) -= 4;
 		  PUTLONG(daemon->max_ttl, p1);
@@ -722,6 +731,7 @@ int extract_addresses(struct dns_header *header, size_t qlen, char *name, time_t
       for (j = 0; j < ntohs(header->ancount); j++) 
 	{
 	  int secflag = 0;
+	  unsigned long mttl = 0;
 	  
 	  if (!(res = extract_name(header, qlen, &p1, name, 0, 10)))
 	    return 0; /* bad packet */
@@ -730,6 +740,14 @@ int extract_addresses(struct dns_header *header, size_t qlen, char *name, time_t
 	  GETSHORT(aqclass, p1);
 	  GETLONG(attl, p1);
 	  if ((daemon->max_ttl != 0) && (attl > daemon->max_ttl) && !is_sign)
+	  {
+ 	    mttl = daemon->max_ttl;
+ 	  }
+ 	  if ((daemon->min_ttl != 0) && (attl < daemon->min_ttl) && !is_sign)
+ 	  {
+ 	    mttl = daemon->min_ttl;
+ 	  }
+	    if (mttl != 0)
 	    {
 	      (p1) -= 4;
 	      PUTLONG(daemon->max_ttl, p1);
@@ -1986,6 +2004,31 @@ size_t answer_request(struct dns_header *header, char *limit, size_t qlen,
 		log_query(F_CONFIG | F_NEG, name, &addr, NULL);
 	    }
 	}
+	//patch to filter aaaa forwards
+     if (qtype == T_AAAA && option_bool(OPT_FILTER_AAAA) ){
+         //return a null reply
+         ans = 1;
+         if (!dryrun) log_query(F_CONFIG | F_IPV6 | F_NEG, name, &addr, NULL);
+             break;
+     }
+     //end of patch
+     //patch to filter https/query type 65 forwards
+     if (qtype == T_HTTPS && option_bool(OPT_FILTER_HTTPS) ){
+         //return a null reply
+         ans = 1;
+         if (!dryrun) log_query(F_CONFIG | F_IPV4 | F_NEG, name, &addr, NULL);
+             break;
+     }
+     //end of patch
+     //patch to filter all unknown query types
+     //known types are defined in cache.c:typestr:36.
+     if (is_query_type_unknown(qtype) && option_bool(OPT_FILTER_UNKNOWN)) {
+         //return a null reply
+         ans = 1;
+         if (!dryrun) log_query(F_CONFIG | F_NEG, name, NULL, NULL);
+             break;
+     }
+     //end of patch
 
       if (!ans)
 	return 0; /* failed to answer a question */
